import asyncio
import os.path
import random
from asgiref.sync import sync_to_async
from django.core import paginator
from aiogram.dispatcher import FSMContext
from django.core.management.base import BaseCommand
from bot.models import *
from aiogram import executor
from aiogram.dispatcher.filters import Text
from aiogram.types import Message
from kaif import keyboards
from kaif.settings import dp
import requests
from kaif import states

HELLO_TEXT_PATH = os.path.join(os.path.dirname(__file__), 'hello.txt')
CRYPTO_PAYMENTS = PaymentCrypto.objects.all()
PAYMENTS = [i.title for i in CRYPTO_PAYMENTS]


async def get_user_balance_in_text(user_id):
    user = (await TelegramUser.objects.aget_or_create(user_id=user_id))[0]
    course = get_course(user.balance)
    return f'–í–∞—à –±–∞–ª–∞–Ω—Å:  {course["rub"]} RUB / {course["btc"]} BTC / {course["ltc"]} LTC'


def get_course(count_of_money):
    if count_of_money:
        ltc_course = requests.get('https://apirone.com/api/v2/ticker?currency=ltc').json()['rub']
        btc_course = requests.get('https://apirone.com/api/v2/ticker?currency=btc').json()['rub']
        return {
            'rub': count_of_money,
            'btc': round(count_of_money / btc_course, 8),
            'ltc': round(count_of_money / ltc_course, 8)
        }
    return {i: 0 for i in ['rub', 'btc', 'ltc']}


@dp.message_handler(commands=['otziv'])
async def comment(message: Message):
    await message.answer(
        '–û—Ç–∑—ã–≤—ã –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–æ–∫',
        reply_markup=keyboards.injection
    )


@dp.message_handler(commands=['start'], state='*')
@dp.message_handler(Text('–ù–∞–∑–∞–¥'), state='*')
@dp.message_handler(Text('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), state='*')
async def start(message: Message, state: FSMContext):
    await state.reset_data()
    await state.finish()
    user = (await TelegramUser.objects.aget_or_create(user_id=message.chat.id, username=message.chat.username))[0]
    with open(HELLO_TEXT_PATH, 'rb') as f:
        text = f.read().decode()

        course = get_course(user.balance)
        text = text.replace(
            'BALANCE', str(course['rub']), 1
        ).replace(
            'BTC_BALANCE', str(course['btc'])
        ).replace(
            'LTC_BALANCE', str(course['ltc'])
        )

        await message.answer(
            text,
            reply_markup=keyboards.start
        )


@dp.message_handler(Text('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))
async def get_balance(message: Message):
    user = (await TelegramUser.objects.aget_or_create(user_id=message.chat.id, username=message.chat.username))[0]
    course = get_course(user.balance)

    await states.EnterAmount.enter.set()
    await message.answer(
        f'–í–∞—à –±–∞–ª–∞–Ω—Å:  {course["rub"]} RUB / {course["btc"]} BTC / {course["ltc"]} LTC\n'
        '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ RUB. –ú–∏–Ω–∏–º—É–º –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 100 RUB',
        reply_markup=keyboards.balance
    )


@dp.message_handler(state=states.EnterAmount.enter)
async def enter_amount(message: Message, state: FSMContext):
    if message.text.isdigit():
        amount = int(message.text)
        if amount < 100:
            return await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ RUB. –ú–∏–Ω–∏–º—É–º –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 100 RUB')
        user = await TelegramUser.objects.aget(user_id=message.chat.id)
        course = get_course(user.balance)

        await states.EnterAmount.select_payment.set()
        await state.set_data({'amount': amount})

        return await message.answer(
            f'<b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b>  {course["rub"]} RUB / {course["btc"]} BTC / {course["ltc"]} LTC\n\n\n\n'
            f'<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>',
            parse_mode='html',
            reply_markup=keyboards.payments_keyboard
        )

    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ RUB. –ú–∏–Ω–∏–º—É–º –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 100 RUB')


@dp.message_handler(Text('–ò–Ω—ä–µ–∫—Ü–∏–∏'), state='*')
async def injection(message: Message, state: FSMContext):
    await state.reset_data()
    await state.finish()
    await message.answer('https://telegra.ph/Vnutrivennyj-priem-narkotikov-05-15-2', reply_markup=keyboards.injection)


@dp.message_handler(Text('–ü–æ–º–æ—â—å'), state='*')
async def get_help(message: Message, state: FSMContext):
    await state.reset_data()
    await state.finish()
    await message.answer('@Tigr_lip', reply_markup=keyboards.assistance)


@dp.message_handler(commands='otzivi', state='*')
async def get_comments(message: Message, state=FSMContext):
    await states.GetComments.next_comments.set()
    num_page = (await state.get_data()).get('page', 1)

    try:
        page = await get_comments_page(num_page)
    except paginator.EmptyPage:
        await state.set_data({'page': 1})
        return await get_comments(message, state)

    text = ''

    async for com in page:
        text += f'‚ûñ‚ûñ–û—Ç {com.nickname} {com.date}‚ûñ‚ûñ\n' \
               f'{com.content}\n\n'

    await state.update_data({'page': num_page + 1})
    await message.answer(
        '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ (–Ω–∞–∂–º–∏—Ç–µ üëâ /otzivi)\n\n' + text,
        reply_markup=keyboards.injection
    )


@sync_to_async
def get_comments_page(num_page):
    comments = paginator.Paginator(Comment.objects.all(), 5)
    return comments.page(num_page).object_list


@dp.message_handler(Text('–°–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É'), state='*')
async def buy_product(message: Message):
    user = await TelegramUser.objects.aget(user_id=message.chat.id)
    course = get_course(user.balance)

    await states.BuyProduct.select_city.set()

    await message.answer(
        f'<b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b>  {course["rub"]} RUB / {course["btc"]} BTC / {course["ltc"]} LTC\n\n'
        '<b>–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –≤–Ω–∏–∑—É:</b>',
        parse_mode='html',
        reply_markup=await keyboards.keyboard_builder(City.objects.all(), 'name')
    )


@dp.message_handler(lambda message: message.text in PAYMENTS, state=states.EnterAmount.select_payment)
async def select_payment(message: Message, state: FSMContext):
    amount = (await state.get_data())['amount']
    title = message.text
    obj = await PaymentCrypto.objects.aget(title=title)
    after_buy = (await state.get_data()).get('buy', False)

    await state.update_data({'payment': obj})
    if obj:
        r = requests.get(f'https://apirone.com/api/v2/ticker?currency={obj.code}').json()['rub']
        st = f'{await get_user_balance_in_text(message.chat.id)}\n\n' if not after_buy else ''
        middle = '<b>–ö–∞–∫ –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è - –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –ø–æ–∫—É–ø–∫–∞–º.</b>\n' if not after_buy else ''
        await message.answer(
            st +
            f'<b>–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {obj.code.upper()}</b>\n' +
            middle +
            '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
            f'<b>–ö–æ—à–µ–ª–µ–∫:</b> {obj.card}\n'
            f'<b>–°—É–º–º–∞:</b> {round(amount/r, 8)} {obj.code.upper()}\n'
            f'<b>–ö—É—Ä—Å:</b> {int(r)} RUB/{obj.code.upper()}\n'
            '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
            '<b>–ß–¢–û–ë–´ –û–ü–õ–ê–¢–ê –ë–´–°–¢–†–ï–ï –ó–ê–ß–ò–°–õ–ò–õ–ê–°–¨, –°–¢–ê–í–¨–¢–ï –í–´–°–û–ö–£–Æ –ö–û–ú–ò–°–°–ò–Æ</b>\n\n'
            f'–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞–∂–º–∏—Ç–µ üëâ /my{obj.code.lower()}',
            parse_mode='html',
            reply_markup=keyboards.buy if not after_buy else keyboards.after_select_keyboard
        )

    else:
        await message.answer(
            '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n'
            '–î–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É'
        )


@dp.message_handler(Text('üí∞–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—Éüí∞'), state=states.EnterAmount.select_payment)
async def check_pay(message: Message, state: FSMContext):
    await asyncio.sleep(random.randint(5, 10))
    amount = (await state.get_data())['amount']
    obj = (await state.get_data())['payment']
    if obj:
        r = requests.get(f'https://apirone.com/api/v2/ticker?currency={obj.code}').json()['rub']

        user = await TelegramUser.objects.aget(user_id=message.chat.id)
        course = get_course(user.balance)

        await message.answer(
            f'<b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b>  {course["rub"]} RUB / {course["btc"]} BTC / {course["ltc"]} LTC\n\n'
            f'<b>–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {obj.code.upper()}</b>\n'
            '<b>–ö–∞–∫ –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è - –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –ø–æ–∫—É–ø–∫–∞–º.</b>\n'
            '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
            f'<b>–ö–æ—à–µ–ª–µ–∫:</b> {obj.card}\n'
            f'<b>–°—É–º–º–∞:</b> {round(amount/r, 8)} {obj.code.upper()}\n'
            f'<b>–ö—É—Ä—Å:</b> {int(r)} RUB/{obj.code.upper()}\n'
            '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
            '<b>–ß–¢–û–ë–´ –û–ü–õ–ê–¢–ê –ë–´–°–¢–†–ï–ï –ó–ê–ß–ò–°–õ–ò–õ–ê–°–¨, –°–¢–ê–í–¨–¢–ï –í–´–°–û–ö–£–Æ –ö–û–ú–ò–°–°–ò–Æ</b>\n\n'
            f'–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞–∂–º–∏—Ç–µ üëâ /my{obj.code.lower()}',
            parse_mode='html',
            reply_markup=keyboards.buy
        )

    else:
        await message.answer(
            '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n'
            '–î–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É'
        )


@dp.message_handler(state=states.BuyProduct.select_city)
async def select_city(message: Message, state: FSMContext):
    try:
        city = await City.objects.aget(name=message.text)
    except City.DoesNotExist:
        return await message.answer(
            '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n'
            '–î–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É',
            reply_markup=await keyboards.keyboard_builder(City.objects.all(), 'name')
        )

    await state.update_data({'city': city})
    await states.BuyProduct.select_product.set()

    await message.answer(
        f'{await get_user_balance_in_text(message.chat.id)}\n\n'
        f'<b>–í—ã –≤—ã–±—Ä–∞–ª–∏</b> "{city.name}"\n\n'
        '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
        f'üè° <b>–ì–æ—Ä–æ–¥:</b> {city.name}\n'
        '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n'
        '<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:</b>',
        parse_mode='html',
        reply_markup=await keyboards.keyboard_builder(Product.objects.filter(city=city), 'name')
    )


@dp.message_handler(state=states.BuyProduct.select_product)
async def select_product(message: Message, state: FSMContext):
    user_data = await state.get_data()
    city = user_data['city']
    try:
        product = await Product.objects.aget(name=message.text, city=city)
    except Product.DoesNotExist:
        return await message.answer(
            '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n'
            '–î–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É',
            reply_markup=await keyboards.keyboard_builder(Product.objects.filter(city=city), 'name')
        )

    await state.update_data({'product': product})
    await states.BuyProduct.select_count.set()
    await state.get_data()

    await message.answer(
        f'{await get_user_balance_in_text(message.chat.id)}\n\n'
        f'<b>–í—ã –≤—ã–±—Ä–∞–ª–∏</b> "{product.name}". \n\n'
        '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
        f'<b>üè° –ì–æ—Ä–æ–¥</b>: {city.name}\n'
        f'<b>üì¶ –¢–æ–≤–∞—Ä</b>: {product.name}\n'
        '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n'
        '<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞—Å–æ–≤–∫—É</b>:',
        reply_markup=await keyboards.keyboard_builder(product.packs.all(), '__str__'),
        parse_mode='html'
    )


@dp.message_handler(state=states.BuyProduct.select_count)
async def select_weight(message: Message, state: FSMContext):
    user_data = await state.get_data()
    city = user_data['city']
    product = user_data['product']

    if message.text not in [str(i) async for i in product.packs.all()]:
        return await message.answer(
            '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n'
            '–î–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É',
            reply_markup=await keyboards.keyboard_builder(Product.objects.filter(city=city), 'name')
        )

    pack_index = [str(i) async for i in product.packs.all()].index(message.text)
    pack = [i async for i in product.packs.all()][pack_index]
    await state.update_data({'pack': pack})
    await states.BuyProduct.select_area.set()

    await message.answer(
        f'{await get_user_balance_in_text(message.chat.id)}\n\n'
        f'<b>–í—ã –≤—ã–±—Ä–∞–ª–∏</b> "{str(pack)}". \n\n'
        '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
        f'<b>üè° –ì–æ—Ä–æ–¥</b>: {city.name}\n'
        f'<b>üì¶ –¢–æ–≤–∞—Ä</b>: {product.name}\n'
        f'<b>üìã –§–∞—Å–æ–≤–∫–∞:</b> {str(pack).replace("—Ä—É–±", "—Ä—É–±–ª–µ–π")}\n'
        '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n'
        '<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω</b>:',
        reply_markup=await keyboards.keyboard_builder(pack.areas.all(), 'name'),
        parse_mode='html',
    )


@dp.message_handler(state=states.BuyProduct.select_area)
async def select_area(message: Message, state: FSMContext):
    user_data = await state.get_data()
    city = user_data['city']
    product = user_data['product']
    pack = user_data['pack']

    if message.text not in [i.name async for i in pack.areas.all()]:
        return await message.answer(
            '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n'
            '–î–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É',
            reply_markup=await keyboards.keyboard_builder(Product.objects.filter(city=city), 'name')
        )
    area_index = [i.name async for i in pack.areas.all()].index(message.text)
    area = [i async for i in pack.areas.all()][area_index]
    await state.update_data({'pack': area})

    await states.EnterAmount.select_payment.set()
    await state.set_data({'amount': pack.price, 'buy': True})

    await message.answer(
        f'<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ </b>"{area.name}".\n\n'
        '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
        f'<b>üè° –ì–æ—Ä–æ–¥:</b> {city.name}\n'
        f'<b>üì¶ –¢–æ–≤–∞—Ä:</b> {product.name}\n'
        f'<b>üìã –†–∞–π–æ–Ω:</b> {area.name}\n'
        f'<b>üìã –§–∞—Å–æ–≤–∫–∞:</b> {str(pack).replace("—Ä—É–±", "—Ä—É–±–ª–µ–π")}\n'
        '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n'
        '<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>',
        parse_mode='html',
        reply_markup=keyboards.payments_keyboard
    )


@dp.message_handler(commands=['mybtc', 'myltc'])
async def get_address(message: Message):
    code = message.text.replace('/my', '')
    await message.answer(
        (await PaymentCrypto.objects.aget(code=code)).card
    )


@dp.message_handler(Text('–ü—Ä–∞–π—Å'))
async def get_price_list(message: Message):
    await states.BuyProduct.select_city.set()
    await message.answer(
        '–°–µ–π—á–∞—Å –≤ –Ω–∞–ª–∏—á–∏–∏:\n\n'
        f'{await get_text_for_price_list()}'
        f'{await get_user_balance_in_text(message.chat.id)}\n\n'
        f'<b>–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –≤–Ω–∏–∑—É:</b>',
        parse_mode='html',
        reply_markup=await keyboards.keyboard_builder(City.objects.all(), 'name')
    )


@dp.message_handler(Text('Visa/MasterCard'), state=states.EnterAmount.select_payment)
async def select_exchange(message: Message, state: FSMContext):
    amount = (await state.get_data()).get('amount')
    await states.ExchangeCard.exchange_select.set()

    await message.answer(
        f'{await get_user_balance_in_text(message.chat.id)}\n\n'
        f'–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–±–º–µ–Ω–∞ –í—ã –ø–æ–ª—É—á–∏—Ç–µ BTC\n'
        '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
        '–í–ê–ñ–ù–û! –û–ø–ª–∞—Ç–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç—Å—è –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –î–∏–∞–ø–∞–∑–æ–Ω –∫–æ–ª–µ–±–∞–Ω–∏—è —Ü–µ–Ω—ã 1-50 —Ä—É–±–ª–µ–π.\n'
        '–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã —É–∫–∞–∑–∞–Ω–Ω–∞—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ –ü–†–ò–ë–õ–ò–ó–ò–¢–ï–õ–¨–ù–ê–Ø.\n'
        '–¢–æ—á–Ω—É—é —Å—É–º–º—É –í—ã –ø–æ–ª—É—á–∏—Ç–µ –≤–º–µ—Å—Ç–µ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É.\n'
        '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
        f'–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è : {amount} RUB.\n'
        '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
        '<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–º–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç</b>\n'
        '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
        f'{await get_select_exchange_text(amount)}',
        parse_mode='html',
        reply_markup=await keyboards.keyboard_builder(Exchange.objects.all(), 'name')
    )


@dp.message_handler(state=states.ExchangeCard.exchange_select)
async def exchange_pay(message: Message, state: FSMContext, obj=None):
    amount = (await state.get_data()).get('amount')
    if not obj:
        try:
            obj = await Exchange.objects.aget(name=message.text)
        except Exchange.DoesNotExist:
            return await select_exchange(message, state)

    await state.update_data({'exc': obj})

    await asyncio.sleep(random.randint(10, 15))
    await states.ExchangeCard.check_payment.set()
    await message.answer(
        f'{await get_user_balance_in_text(message.chat.id)}\n\n'
        '–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–±–º–µ–Ω–∞ –í—ã –ø–æ–ª—É—á–∏—Ç–µ BTC\n'
        '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
        f'<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–±–º–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç {obj.name}\n'
        '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
        f'‚úÖ –ù–æ–º–µ—Ä –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏: {random.randint(12332479, 12882679)}\n'
        f'‚úÖ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {obj.card}\n'
        f'‚úÖ –°—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount} RUB\n'
        '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
        '‚úÖ –í–´–î–ê–ù–ù–´–ï –†–ï–ö–í–ò–ó–ò–¢–´ –î–ï–ô–°–¢–í–£–Æ–¢ 30 –ú–ò–ù–£–¢\n'
        '‚úÖ –í–´ –ü–û–¢–ï–†–Ø–ï–¢–ï –î–ï–ù–¨–ì–ò, –ï–°–õ–ò –û–ü–õ–ê–¢–ò–¢–ï –ü–û–ó–ñ–ï\n'
        '‚úÖ –ü–ï–†–ï–í–û–î–ò–¢–ï –¢–û–ß–ù–£–Æ –°–£–ú–ú–£. –ù–ï–í–ï–†–ù–ê–Ø –°–£–ú–ú–ê –ù–ï –ë–£–î–ï–¢ –ó–ê–ß–ò–°–õ–ï–ù–ê.\n'
        '‚úÖ –û–ü–õ–ê–¢–ê –î–û–õ–ñ–ù–ê –ü–†–û–•–û–î–ò–¢–¨ –û–î–ù–ò–ú –ü–õ–ê–¢–ï–ñ–û–ú.\n'
        '‚úÖ –ü–†–û–ë–õ–ï–ú–´ –° –û–ü–õ–ê–¢–û–ô? –ü–ò–°–ê–¢–¨ –í TELEGRAM : babushkahelpbot\n'
        '‚úÖ –° –ü–†–û–ë–õ–ï–ú–ù–û–ô –ó–ê–Ø–í–ö–û–ô –û–ë–†–ê–©–ê–ô–¢–ï–°–¨ –ù–ï –ü–û–ó–î–ù–ï–ï 24 –ß–ê–°–û–í –° –ú–û–ú–ï–ù–¢–ê –û–ü–õ–ê–¢–´.</b>',
        reply_markup=keyboards.check_exchange,
        parse_mode='html'
    )


@dp.message_handler(Text('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'), state=states.ExchangeCard.check_payment)
async def check_exc(message: Message, state: FSMContext):
    await asyncio.sleep(random.randint(10, 15))
    await exchange_pay(message, state, (await state.get_data())['exc'])


@dp.message_handler(Text('–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É'), state=states.ExchangeCard.check_payment)
async def cancel_exc(message: Message, state: FSMContext):
    await state.reset_data()
    await start(message, state)


@sync_to_async
def get_text_for_price_list():
    text = ''
    for city in City.objects.all():
        text += f'‚ûñ‚ûñ‚ûñ<b>{city.name.upper()}</b>‚ûñ‚ûñ‚ûñ\n\n'
        for product in Product.objects.filter(city=city):
            pack_text = "\n".join([str(i) for i in product.packs.all()])
            text += f'<b>{product.name}</b>\n' \
                    f'{pack_text}\n\n'
    return text


@sync_to_async
def get_select_exchange_text(amount):
    text = ''

    for exc in Exchange.objects.all():
        text += f'<b>{exc.name}</b>\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ –ü–†–ò–ú–ï–†–ù–û: {round(amount*((100+exc.percent)/100), 2)} RUB\n\n'

    return text


class Command(BaseCommand):
    help = 'not help'

    def handle(self, *args, **options):
        executor.Executor(dp).start_polling()
